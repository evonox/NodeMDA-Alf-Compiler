module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { UnitDefinition: peg$parseUnitDefinition },
        peg$startRuleFunction  = peg$parseUnitDefinition,

        peg$c0 = function(namespaceName, importDec, documentation, annotation, definition) {
            let obj = new alf.UnitDefinition();
            obj.namespaceName = namespaceName;
            obj.import = importDec;
            obj.definition = definition;
            obj.documentation = documentation;
            obj.definition.annotation = annotation;
            return obj;
        },
        peg$c1 = function(stereotypeName, s) { return s; },
        peg$c2 = function(stereotypeName, s) {
            if(s === null) s = new alf.StereotypeAnnotation();
            s.stereotypeName = stereotypeName;
            return s;
        },
        peg$c3 = function(names) {
            let s = new alf.StereotypeAnnotation();
            s.names = names;
            return s;
        },
        peg$c4 = function(taggedValues) {
            let s = new alf.StereotypeAnnotation();
            s.taggedValues = taggedValues;
            return s;
        },
        peg$c5 = function(first, t) { return t;},
        peg$c6 = function(first, other) {
            let obj = new alf.TaggedValueList();
            obj.taggedValue = [first].concat(other);
            return obj;
        },
        peg$c7 = function(name, t) {
            t.name = name;
            return t;
        },
        peg$c8 = function(value) {
            let obj = new alf.TaggedValue();
            obj.value = value;
            return value;
        },
        peg$c9 = function(operator, value) {
            let obj = new alf.TaggedValue();
            obj.value = value;
            obj.operator = operator;
            return value;
        },
        peg$c10 = function(q) { return q; },
        peg$c11 = function(visibility, i) {
            i.visibility = visibility;
            return i;
        },
        peg$c12 = function(n) { return n; },
        peg$c13 = function(name) {
            let obj = new alf.PackageDefinition();
            obj.name = name;
            return name;
        },
        peg$c14 = function(ownedMember) {
            d.ownedMember = ownedMember;
            return d;
        },
        peg$c15 = function(documentation, annotation, visibility, m) {
            m.visibility = visibility;
            m.annotation = annotation;
            m.documentation = documentation;
            return m;
        },
        peg$c16 = function(first, p) { return p; },
        peg$c17 = function(first, other) {
            let obj = new alf.ClassifierDefinition();
            obj.ownedMember = [first].concat(other);
            return obj;
        },
        peg$c18 = function(qList) { return qList; },
        peg$c19 = function(abstract, d) {
            if(abstract !== null) d.isAbstract = true;
            return d;
        },
        peg$c20 = function(body) {
            let obj = new alf.ActivityDefinition();
            obj.body = body;
            return obj;
        },
        peg$c21 = function(name) {
            let obj = new alf.ActivityDefinition();
            obj.name = name;
            obj.isStub = true;
            return obj;
        },
        peg$c22 = function(name, specialization) {
            let obj = new alf.EnumerationDefinition();
            obj.name = name;
            obj.specialization = specialization;
            return obj;
        },
        peg$c23 = function(documentation, name) {
            let obj = new alf.EnumerationLiteralName();
            obj.name = name;
            obj.documentation = documentation;
            obj.visibility = "public";
            return obj;
        },
        peg$c24 = function(d) {
            return d === null ? new alf.NamespaceDefinition() : d;
        },
        peg$c25 = function(first, other) {
            let obj = new alf.NamespaceDefinition();
            obj.ownedMember = [first].concat(other);
            return obj;
        },
        peg$c26 = function(documentation, annotation, direction, name, p) {
            p.documentation = documentation;
            p.annotation = annotation;
            p.direction = direction;
            p.name = name;
            return p;
        },
        peg$c27 = function(d) { return d; },
        peg$c28 = function(d, initializer) {
            d.initializer = initializer;
            return d;
        },
        peg$c29 = function(e) { return e; },
        peg$c30 = function(name, compose, tp) {
            let obj = new alf.PropertyDefinition();
            obj.name = name;
            obj = Object.assign(obj, tp);
            if(compose !== null) {
                obj.isComposite = true;
            }
            return obj;
        },
        peg$c31 = function(typeName, d) {
            if(d === null) d = new alf.TypedElementDefinition();
            d.typeName = typeName;
            return d;
        },
        peg$c32 = function(d, oau) {
            if(oau !== null) {
                d = Object.assign(oau);
            }
            return d;
        },
        peg$c33 = function(ordered, nonUnique) { return [ordered, nonUnique]; },
        peg$c34 = function(nonUnique, ordered) { return [ordered, nonUnique]; },
        peg$c35 = function() { return [true, true]; },
        peg$c36 = function(data) {
            let obj = new alf.TypedElementDefinition();
            obj.isOrdered = data[0] === true;
            obj.isNonunique = data[1] === true;
            return obj;
        },
        peg$c37 = function(b) { return b; },
        peg$c38 = function(statement) {
            let obj = new alf.Block();
            obj.statement = statement;
            return obj;
        },
        peg$c39 = function(documentation, s) {
            s.documentation = documentation;
            return s;
        },
        peg$c40 = function(block) {
            let obj = new alf.BlockStatement();
            obj.block = block;
            return obj;
        },
        peg$c41 = function() {
            return new alf.EmptyStatement();
        },
        peg$c42 = function(s, finalClause) {
            s.finalClause = finalClause;
            return s;
        },
        peg$c43 = function(first, c) { return c; },
        peg$c44 = function(first, other) {
            let obj = new alf.IfStatement();
            obj.nonFinalClauses = [first].concat(other);
            return obj;
        },
        peg$c45 = function(first, other) {
            let obj = new alf.ConcurrentClauses();
            obj.clause = [first].concat(other);
            return obj;
        },
        peg$c46 = function(expression, b) {
            let obj = new alf.NonFinalClause();
            obj.expression = expression;
            obj.block = b;
            return obj;
        },
        peg$c47 = function(expression, nonDefaultClause, defaultClause) {
            let obj = new alf.SwitchStatement();
            obj.expression = expression;
            obj.nonDefaultClause = nonDefaultClause;
            obj.defaultClause = defaultClause;
            return obj;
        },
        peg$c48 = function(cases, block) {
            let obj = new alf.SwitchClause();
            obj.case = cases;
            obj.block = block;
            return obj;
        },
        peg$c49 = function(condition, body) {
            let obj = new alf.WhileStatement();
            obj.condition = condition;
            obj.body = body;
            return obj;
        },
        peg$c50 = function(body, condition) {
            let obj = new alf.DoStatement();
            obj.condition = condition;
            obj.body = body;
            return obj;
        },
        peg$c51 = function(s, body) {
            s.body = body;
            return s;
        },
        peg$c52 = function(first, v) { return v; },
        peg$c53 = function(first, other) {
            let obj = new alf.ForStatement();
            obj.variableDefinition = [first].concat(other);
            return obj;
        },
        peg$c54 = function(variable, expression1, expression2) {
            let obj = new alf.LoopVariableDefinition();
            obj.variable = variable;
            obj.expression1 = expression1;
            obj.expression2 = expression2;
            return obj;
        },
        peg$c55 = function(typeName, variable, expression1) {
            let obj = new alf.LoopVariableDefinition();
            obj.typeName = typeName;
            obj.variable = variable;
            obj.expression1 = expression1;
            obj.typeIsInferred = false;
            return obj;
        },
        peg$c56 = function() { return new alf.BreakStatement(); },
        peg$c57 = function(expression) {
            let obj = new alf.ReturnStatement();
            obj.expression = expression;
            return obj;
        },
        peg$c58 = function(name, signalNames) {
            let obj = new alf.AcceptBlock();
            obj.name = name;
            obj.signalNames = signalNames;
            return obj;
        },
        peg$c59 = function(expression, s) {
            s.expression = expression;
            return s;
        },
        peg$c60 = function(fromList, toList) {
            let obj = new alf.ClassifyStatement();
            obj.fromList = fromList;
            obj.toList = toList;
            return obj;
        },
        peg$c61 = function(all, toList) {
            let obj = new alf.ClassifyStatement();
            obj.toList = toList;
            if(all !== null) obj.isReclassifyAll = true;
            return obj;
        },
        peg$c62 = function(qList) {
            return qList;
        },
        peg$c63 = function() {
            return new alf.QualifiedNameList();
        },
        peg$c64 = function(first, other) {
            let obj = new alf.QualifiedNameList();
            obj.name = [first].concat(other);
            return obj;
        },
        peg$c65 = function(image) {
            let obj = new alf.BooleanLiteralExpression)();
            obj.image = image;
            return obj;
        },
        peg$c66 = function(image) {
            let obj = new alf.NaturalLiteralExpression)();
            obj.image = image;
            return obj;
        },
        peg$c67 = function() {
            return new alf.UnboundedLiteralExpression();
        },
        peg$c68 = function(image) {
            let obj = new alf.StringLiteralExpression)();
            obj.image = image;
            return obj;
        },
        peg$c69 = function(name) {
            let obj = new alf.NameExpression();
            obj.name = name;
            return obj;
        },
        peg$c70 = function() {
            return new alf.ThisExpression();
        },
        peg$c71 = function(tuple) { return tuple; },
        peg$c72 = function(first, other) {
            let obj = new alf.PositionalTuple();
            obj.expression = [first].concat(other);
            return obj;
        },
        peg$c73 = function(expr) { return expr; },
        peg$c74 = function(first, ne) { return ne; },
        peg$c75 = function(first, other) {
            let obj = new alf.NamedTuple();
            obj.namedExpression = [first].concat(other);
            return obj;
        },
        peg$c76 = function(name, expression) {
            let obj = new alf.NamedExpression();
            obj.name = name;
            obj.expression = expression;
            return obj;
        },
        peg$c77 = function(qn) { return qn;},
        peg$c78 = function(uqn, uqNames) { 
            let qn = new alf.QualifiedName();
            uqNames = uqNames === null ? [] : uqNames;
            qn.nameBinding = [uqn].concat(uqNames);
            qn.isAmbiguous = false; 
            return qn; 
        },
        peg$c79 = function(uqn, uqNames) { 
            let qn = new alf.QualifiedName();
            uqNames = uqNames === null ? [] : uqNames;
            qn.nameBinding = [uqn].concat(uqNames);
            qn.isAmbiguous = true; 
            return qn; 
        },
        peg$c80 = function(first, other) {
            let obj = new alf.QualifiedName();
            obj.nameBinding = [first].concat(other);
            return obj;
        },
        peg$c81 = function(nb) { return nb; },
        peg$c82 = function(nameBinding) {
            let obj = new alf.QualifiedName();
            obj.nameBinding = [nameBinding];
            return obj;
        },
        peg$c83 = function(name, binding) {
            let obj = new alf.NameBinding();
            obj.name = name;
            obj.binding = binding;
            return obj;
        },
        peg$c84 = function(binding) { return binding; },
        peg$c85 = function(first, qn) { return qn; },
        peg$c86 = function(first, other) {
            let obj = new alf.PositionalTemplateBinding();
            obj.argumentName = new Array();
            obj.argumentName.push(first);
            obj.argumentName.push(...other);
            return obj;
        },
        peg$c87 = function(first, tps) { return tps; },
        peg$c88 = function(first, other) {
            let obj = new alf.NamedTemplateBinding();
            obj.substitution = new Array();
            obj.substitution.push(first);
            obj.substitution.push(...other);
            return obj;
        },
        peg$c89 = function(parameterName, argumentName) {
            let obj = new alf.TemplateParameterSubstitution();
            obj.parameterName = parameterName;
            obj.argumentName = argumentName;
            return obj;
        },
        peg$c90 = "..",
        peg$c91 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c92 = "::",
        peg$c93 = { type: "literal", value: "::", description: "\"::\"" },
        peg$c94 = "=>",
        peg$c95 = { type: "literal", value: "=>", description: "\"=>\"" },
        peg$c96 = "->",
        peg$c97 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c98 = "(",
        peg$c99 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c100 = ")",
        peg$c101 = { type: "literal", value: ")", description: "\")\"" },
        peg$c102 = "{",
        peg$c103 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c104 = "}",
        peg$c105 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c106 = "[",
        peg$c107 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c108 = "]",
        peg$c109 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c110 = ";",
        peg$c111 = { type: "literal", value: ";", description: "\";\"" },
        peg$c112 = ",",
        peg$c113 = { type: "literal", value: ",", description: "\",\"" },
        peg$c114 = ".",
        peg$c115 = { type: "literal", value: ".", description: "\".\"" },
        peg$c116 = ":",
        peg$c117 = { type: "literal", value: ":", description: "\":\"" },
        peg$c118 = "//@",
        peg$c119 = { type: "literal", value: "//@", description: "\"//@\"" },
        peg$c120 = "/*@",
        peg$c121 = { type: "literal", value: "/*@", description: "\"/*@\"" },
        peg$c122 = ">>>",
        peg$c123 = { type: "literal", value: ">>>", description: "\">>>\"" },
        peg$c124 = "<<=",
        peg$c125 = { type: "literal", value: "<<=", description: "\"<<=\"" },
        peg$c126 = ">>=",
        peg$c127 = { type: "literal", value: ">>=", description: "\">>=\"" },
        peg$c128 = ">>>=",
        peg$c129 = { type: "literal", value: ">>>=", description: "\">>>=\"" },
        peg$c130 = "<<",
        peg$c131 = { type: "literal", value: "<<", description: "\"<<\"" },
        peg$c132 = ">>",
        peg$c133 = { type: "literal", value: ">>", description: "\">>\"" },
        peg$c134 = "==",
        peg$c135 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c136 = "<=",
        peg$c137 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c138 = ">=",
        peg$c139 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c140 = "!=",
        peg$c141 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c142 = "&&",
        peg$c143 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c144 = "||",
        peg$c145 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c146 = "++",
        peg$c147 = { type: "literal", value: "++", description: "\"++\"" },
        peg$c148 = "--",
        peg$c149 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c150 = "+=",
        peg$c151 = { type: "literal", value: "+=", description: "\"+=\"" },
        peg$c152 = "-=",
        peg$c153 = { type: "literal", value: "-=", description: "\"-=\"" },
        peg$c154 = "*=",
        peg$c155 = { type: "literal", value: "*=", description: "\"*=\"" },
        peg$c156 = "/=",
        peg$c157 = { type: "literal", value: "/=", description: "\"/=\"" },
        peg$c158 = "&=",
        peg$c159 = { type: "literal", value: "&=", description: "\"&=\"" },
        peg$c160 = "|=",
        peg$c161 = { type: "literal", value: "|=", description: "\"|=\"" },
        peg$c162 = "^=",
        peg$c163 = { type: "literal", value: "^=", description: "\"^=\"" },
        peg$c164 = "%=",
        peg$c165 = { type: "literal", value: "%=", description: "\"%=\"" },
        peg$c166 = "=",
        peg$c167 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c168 = ">",
        peg$c169 = { type: "literal", value: ">", description: "\">\"" },
        peg$c170 = "<",
        peg$c171 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c172 = "!",
        peg$c173 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c174 = "~",
        peg$c175 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c176 = "?",
        peg$c177 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c178 = "@",
        peg$c179 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c180 = "$",
        peg$c181 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c182 = "+",
        peg$c183 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c184 = "-",
        peg$c185 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c186 = "*",
        peg$c187 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c188 = "/",
        peg$c189 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c190 = "&",
        peg$c191 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c192 = "|",
        peg$c193 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c194 = "^",
        peg$c195 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c196 = "%",
        peg$c197 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c198 = "abstract",
        peg$c199 = { type: "literal", value: "abstract", description: "\"abstract\"" },
        peg$c200 = "accept",
        peg$c201 = { type: "literal", value: "accept", description: "\"accept\"" },
        peg$c202 = "active",
        peg$c203 = { type: "literal", value: "active", description: "\"active\"" },
        peg$c204 = "activity",
        peg$c205 = { type: "literal", value: "activity", description: "\"activity\"" },
        peg$c206 = "allInstances",
        peg$c207 = { type: "literal", value: "allInstances", description: "\"allInstances\"" },
        peg$c208 = "any",
        peg$c209 = { type: "literal", value: "any", description: "\"any\"" },
        peg$c210 = "as",
        peg$c211 = { type: "literal", value: "as", description: "\"as\"" },
        peg$c212 = "assoc",
        peg$c213 = { type: "literal", value: "assoc", description: "\"assoc\"" },
        peg$c214 = "break",
        peg$c215 = { type: "literal", value: "break", description: "\"break\"" },
        peg$c216 = "case",
        peg$c217 = { type: "literal", value: "case", description: "\"case\"" },
        peg$c218 = "class",
        peg$c219 = { type: "literal", value: "class", description: "\"class\"" },
        peg$c220 = "classify",
        peg$c221 = { type: "literal", value: "classify", description: "\"classify\"" },
        peg$c222 = "clearAssoc",
        peg$c223 = { type: "literal", value: "clearAssoc", description: "\"clearAssoc\"" },
        peg$c224 = "compose",
        peg$c225 = { type: "literal", value: "compose", description: "\"compose\"" },
        peg$c226 = "createLink",
        peg$c227 = { type: "literal", value: "createLink", description: "\"createLink\"" },
        peg$c228 = "datatype",
        peg$c229 = { type: "literal", value: "datatype", description: "\"datatype\"" },
        peg$c230 = "default",
        peg$c231 = { type: "literal", value: "default", description: "\"default\"" },
        peg$c232 = "destroyLink",
        peg$c233 = { type: "literal", value: "destroyLink", description: "\"destroyLink\"" },
        peg$c234 = "do",
        peg$c235 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c236 = "else",
        peg$c237 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c238 = "enum",
        peg$c239 = { type: "literal", value: "enum", description: "\"enum\"" },
        peg$c240 = "for",
        peg$c241 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c242 = "from",
        peg$c243 = { type: "literal", value: "from", description: "\"from\"" },
        peg$c244 = "hastype",
        peg$c245 = { type: "literal", value: "hastype", description: "\"hastype\"" },
        peg$c246 = "if",
        peg$c247 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c248 = "import",
        peg$c249 = { type: "literal", value: "import", description: "\"import\"" },
        peg$c250 = "in",
        peg$c251 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c252 = "inout",
        peg$c253 = { type: "literal", value: "inout", description: "\"inout\"" },
        peg$c254 = "instanceof",
        peg$c255 = { type: "literal", value: "instanceof", description: "\"instanceof\"" },
        peg$c256 = "let",
        peg$c257 = { type: "literal", value: "let", description: "\"let\"" },
        peg$c258 = "namespace",
        peg$c259 = { type: "literal", value: "namespace", description: "\"namespace\"" },
        peg$c260 = "new",
        peg$c261 = { type: "literal", value: "new", description: "\"new\"" },
        peg$c262 = "nonunique",
        peg$c263 = { type: "literal", value: "nonunique", description: "\"nonunique\"" },
        peg$c264 = "null",
        peg$c265 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c266 = "or",
        peg$c267 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c268 = "ordered",
        peg$c269 = { type: "literal", value: "ordered", description: "\"ordered\"" },
        peg$c270 = "out",
        peg$c271 = { type: "literal", value: "out", description: "\"out\"" },
        peg$c272 = "package",
        peg$c273 = { type: "literal", value: "package", description: "\"package\"" },
        peg$c274 = "private",
        peg$c275 = { type: "literal", value: "private", description: "\"private\"" },
        peg$c276 = "protected",
        peg$c277 = { type: "literal", value: "protected", description: "\"protected\"" },
        peg$c278 = "public",
        peg$c279 = { type: "literal", value: "public", description: "\"public\"" },
        peg$c280 = "receive",
        peg$c281 = { type: "literal", value: "receive", description: "\"receive\"" },
        peg$c282 = "redefines",
        peg$c283 = { type: "literal", value: "redefines", description: "\"redefines\"" },
        peg$c284 = "reduce",
        peg$c285 = { type: "literal", value: "reduce", description: "\"reduce\"" },
        peg$c286 = "return",
        peg$c287 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c288 = "sequence",
        peg$c289 = { type: "literal", value: "sequence", description: "\"sequence\"" },
        peg$c290 = "specializes",
        peg$c291 = { type: "literal", value: "specializes", description: "\"specializes\"" },
        peg$c292 = "super",
        peg$c293 = { type: "literal", value: "super", description: "\"super\"" },
        peg$c294 = "signal",
        peg$c295 = { type: "literal", value: "signal", description: "\"signal\"" },
        peg$c296 = "switch",
        peg$c297 = { type: "literal", value: "switch", description: "\"switch\"" },
        peg$c298 = "this",
        peg$c299 = { type: "literal", value: "this", description: "\"this\"" },
        peg$c300 = "to",
        peg$c301 = { type: "literal", value: "to", description: "\"to\"" },
        peg$c302 = "while",
        peg$c303 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c304 = "\"",
        peg$c305 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c306 = "isUnique",
        peg$c307 = { type: "literal", value: "isUnique", description: "\"isUnique\"" },
        peg$c308 = function(content) { return content; },
        peg$c309 = "forAll",
        peg$c310 = { type: "literal", value: "forAll", description: "\"forAll\"" },
        peg$c311 = "exists",
        peg$c312 = { type: "literal", value: "exists", description: "\"exists\"" },
        peg$c313 = "one",
        peg$c314 = { type: "literal", value: "one", description: "\"one\"" },
        peg$c315 = "collect",
        peg$c316 = { type: "literal", value: "collect", description: "\"collect\"" },
        peg$c317 = "iterate",
        peg$c318 = { type: "literal", value: "iterate", description: "\"iterate\"" },
        peg$c319 = "select",
        peg$c320 = { type: "literal", value: "select", description: "\"select\"" },
        peg$c321 = "reject",
        peg$c322 = { type: "literal", value: "reject", description: "\"reject\"" },
        peg$c323 = "inline",
        peg$c324 = { type: "literal", value: "inline", description: "\"inline\"" },
        peg$c325 = "kw",
        peg$c326 = { type: "literal", value: "kw", description: "\"kw\"" },
        peg$c327 = "op",
        peg$c328 = { type: "literal", value: "op", description: "\"op\"" },
        peg$c329 = "p",
        peg$c330 = { type: "literal", value: "p", description: "\"p\"" },
        peg$c331 = "n",
        peg$c332 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c333 = "dc",
        peg$c334 = { type: "literal", value: "dc", description: "\"dc\"" },
        peg$c335 = "nlt",
        peg$c336 = { type: "literal", value: "nlt", description: "\"nlt\"" },
        peg$c337 = "blt",
        peg$c338 = { type: "literal", value: "blt", description: "\"blt\"" },
        peg$c339 = "slt",
        peg$c340 = { type: "literal", value: "slt", description: "\"slt\"" },
        peg$c341 = function(content) {
            return content.replace(/\\n/g, "\n");
        },
        peg$c342 = function(content) { return content.join(""); },
        peg$c343 = { type: "any", description: "any character" },
        peg$c344 = function(character) { return character; },
        peg$c345 = /^[0-9]/,
        peg$c346 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c347 = " ",
        peg$c348 = { type: "literal", value: " ", description: "\" \"" },
        peg$c349 = "\n",
        peg$c350 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c351 = "\r",
        peg$c352 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c353 = function(chars, otherText) {
            chars = chars.join("");
            if(otherText !== null) chars += otherText;
            chars = chars.replace(/\r/g, "");
            chars = chars.replace(/\n/g, "\\n");
            return chars;
        },
        peg$c354 = "*/",
        peg$c355 = { type: "literal", value: "*/", description: "\"*/\"" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseUnitDefinition() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseNamespaceDeclaration();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseImportDeclaration();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseImportDeclaration();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedocumentComment();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseStereotypeAnnotations();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseNamespaceDefinition();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStereotypeAnnotations() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseStereotypeAnnotation();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseStereotypeAnnotation();
      }

      return s0;
    }

    function peg$parseStereotypeAnnotation() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseopAt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseQualifiedName();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsepLParen();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTaggedValues();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsepRParen();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c1(s2, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c2(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTaggedValues() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseQualifiedNameList();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTaggedValueList();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseTaggedValueList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseTaggedValue();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsepComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTaggedValue();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c5(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTaggedValue();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c5(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTaggedValue() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepFatArrow();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLiteralValue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLiteralValue() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsebooleanLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNumericUnaryOperator();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenaturalLiteral();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c9(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseopMult();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsestringLiteral();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c8(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseNamespaceDeclaration() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwNamespace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseQualifiedName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepSemiColon();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c10(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseImportDeclaration() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseImportVisibilityIndicator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekwImport();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseImportReference();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepSemiColon();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c11(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseImportVisibilityIndicator() {
      var s0;

      s0 = peg$parsekwPublic();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwPrivate();
      }

      return s0;
    }

    function peg$parseImportReference() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseColonQualifiedName();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsepDoubleColon();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseopMult();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseAliasDefinition();
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDotQualifiedName();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsepDot();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseopMult();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$parseAliasDefinition();
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsename();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsepDoubleColon();
            if (s3 === peg$FAILED) {
              s3 = peg$parsepDot();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseopMult();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$parseAliasDefinition();
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseAliasDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwAs();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c12(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNamespaceDefinition() {
      var s0;

      s0 = peg$parsePackageDefinition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseClassifierDefinition();
      }

      return s0;
    }

    function peg$parseVisibilityIndicator() {
      var s0;

      s0 = peg$parseImportVisibilityIndicator();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwProtected();
      }

      return s0;
    }

    function peg$parsePackageDeclaration() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwPackage();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePackageDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePackageDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePackageBody();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePackageDefinitionOrStub() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePackageDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 === peg$FAILED) {
          s2 = peg$parsePackageBody();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePackageBody() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepLBrace();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsePackagedElement();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsePackagedElement();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRBrace();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c14(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePackagedElement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsedocumentComment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStereotypeAnnotations();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseImportVisibilityIndicator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsePackagedElementDefinition();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c15(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePackagedElementDefinition() {
      var s0;

      s0 = peg$parsePackageDefinitionOrStub();
      if (s0 === peg$FAILED) {
        s0 = peg$parseClassifierDefinitionOrStub();
      }

      return s0;
    }

    function peg$parseClassifierDefinition() {
      var s0;

      s0 = peg$parseClassDefinition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseActiveClassDefinition();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDataTypeDefinition();
          if (s0 === peg$FAILED) {
            s0 = peg$parseEnumerationDefinition();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAssociationDefinition();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSignalDefinition();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseActivityDefinition();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseClassifierDefinitionOrStub() {
      var s0;

      s0 = peg$parseClassDefinitionOrStub();
      if (s0 === peg$FAILED) {
        s0 = peg$parseActiveClassDefinitionOrStub();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDataTypeDefinitionOrStub();
          if (s0 === peg$FAILED) {
            s0 = peg$parseEnumerationDefinitionOrStub();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAssociationDefinitionOrStub();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSignalDefinitionOrStub();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseActivityDefinitionOrStub();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseClassifierSignature() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTemplateParameters();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpecializationClause();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTemplateParameters() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseopLess();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseClassifierTemplateParameter();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsepComma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseClassifierTemplateParameter();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c16(s2, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsepComma();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseClassifierTemplateParameter();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c16(s2, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseopGreater();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c17(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassifierTemplateParameter() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsedocumentComment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsekwSpecializes();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseQualifiedName();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSpecializationClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwSpecializes();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseQualifiedNameList();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c18(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassDeclaration() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwAbstract();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekwClass();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseClassifierSignature();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c19(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseClassDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseClassBody();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassDefinitionOrStub() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseClassDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 === peg$FAILED) {
          s2 = peg$parseClassBody();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassBody() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepLBrace();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseClassMember();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseClassMember();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRBrace();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassMember() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsedocumentComment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStereotypeAnnotations();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVisibilityIndicator();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseClassMemberDefinition();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c15(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassMemberDefinition() {
      var s0;

      s0 = peg$parseClassifierDefinitionOrStub();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFeatureDefinitionOrStub();
      }

      return s0;
    }

    function peg$parseActiveClassDeclaration() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekwAbstract();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekwActive();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekwClass();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseClassifierSignature();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c19(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseActiveClassDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseActiveClassDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseActiveClassBody();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseActiveClassDefinitionOrStub() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseActiveClassDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 === peg$FAILED) {
          s2 = peg$parseActiveClassBody();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseActiveClassBody() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsepLBrace();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseActiveClassMember();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseActiveClassMember();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRBrace();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsekwDo();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseBehaviorClause();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBehaviorClause() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseBlock();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsename();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseActiveClassMember() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsedocumentComment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStereotypeAnnotations();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVisibilityIndicator();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseActiveClassMemberDefinition();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c15(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseActiveClassMemberDefinition() {
      var s0;

      s0 = peg$parseClassMemberDefinition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseActiveFeatureDefinitionOrStub();
      }

      return s0;
    }

    function peg$parseDataTypeDeclaration() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwAbstract();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekwDataType();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseClassifierSignature();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c19(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDataTypeDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDataTypeDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStructuredBody();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDataTypeDefinitionOrStub() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDataTypeDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 === peg$FAILED) {
          s2 = peg$parseStructuredBody();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStructuredBody() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepLBrace();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseStructuredMember();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseStructuredMember();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRBrace();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStructuredMember() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsedocumentComment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStereotypeAnnotations();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekwPublic();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsePropertyDefinition();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c15(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAssociationDeclaration() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwAbstract();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekwAssoc();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseClassifierSignature();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c19(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAssociationDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAssociationDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStructuredBody();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAssociationDefinitionOrStub() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAssociationDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 === peg$FAILED) {
          s2 = peg$parseStructuredBody();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEnumerationDeclaration() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwEnum();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSpecializationClause();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c22(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEnumerationDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseEnumerationDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEnumerationBody();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEnumerationDefinitionOrStub() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseEnumerationDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 === peg$FAILED) {
          s2 = peg$parseEnumerationBody();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEnumerationBody() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsepLBrace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEnumerationLiteralName();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsepComma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseEnumerationLiteralName();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsepComma();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseEnumerationLiteralName();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepRBrace();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEnumerationLiteralName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsedocumentComment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c23(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSignalDeclaration() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwAbstract();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekwSignal();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseClassifierSignature();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c19(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSignalDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSignalDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStructuredBody();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSignalDefinitionOrStub() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSignalDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 === peg$FAILED) {
          s2 = peg$parseStructuredBody();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseActivityDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsekwActivity();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTemplateParameters();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseFormalParameters();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parsepColon();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseTypePart();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseActivityDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseActivityDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBlock();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseActivityDefinitionOrStub() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseActivityDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 === peg$FAILED) {
          s2 = peg$parseBlock();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFormalParameters() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepLParen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFormalParameterList();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRParen();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFormalParameterList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseFormalParameter();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsepColon();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseFormalParameter();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c16(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepColon();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseFormalParameter();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c16(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFormalParameter() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsedocumentComment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStereotypeAnnotations();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseParameterDirection();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepColon();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseTypePart();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c26(s1, s2, s3, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseParameterDirection() {
      var s0;

      s0 = peg$parsekwIn();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwInOut();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekwOut();
        }
      }

      return s0;
    }

    function peg$parseFeatureDefinitionOrStub() {
      var s0;

      s0 = peg$parseAttributeDefinition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOperationDefinitionOrStub();
      }

      return s0;
    }

    function peg$parseActiveFeatureDefinitionOrStub() {
      var s0;

      s0 = peg$parseReceptionDefinition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSignalReceptionDefinitionOrStub();
      }

      return s0;
    }

    function peg$parsePropertyDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePropertyDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAttributeDefinition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsePropertyDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeInitializer();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepSemiColon();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c28(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAttributeInitializer() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseopAssign();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInitializationExpression();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c29(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePropertyDeclaration() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepColon();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekwCompose();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTypePart();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c30(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTypePart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTypeName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMultiplicity();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c31(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseMultiplicity() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepLBracket();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMultiplicityRange();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRBracket();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOrderingAndUniqueness();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c32(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOrderingAndUniqueness() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsekwOrdered();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsekwNonUnique();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c33(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsekwNonUnique();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekwOrdered();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c34(s2, s3);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parsekwSequence();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c35();
          }
          s1 = s2;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c36(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMultiplicityRange() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsenaturalLiteral();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepDoubleDot();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUnlimitedNaturalLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUnlimitedNaturalLiteral() {
      var s0;

      s0 = peg$parsenaturalLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopMult();
      }

      return s0;
    }

    function peg$parseOperationDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsekwAbstract();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFormalParameters();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsepColon();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseTypePart();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRedefinitionClause();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOperationDefinitionOrStub() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOperationDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 === peg$FAILED) {
          s2 = peg$parseBlock();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRedefinitionClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwRedefines();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseQualifiedNameList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseReceptionDefinition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwReceive();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseQualifiedName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepSemiColon();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSignalReceptionDeclaration() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekwReceive();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekwSignal();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsename();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSpecializationClause();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSignalReceptionDefinitionOrStub() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSignalReceptionDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 === peg$FAILED) {
          s2 = peg$parseStructuredBody();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBlock() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepLBrace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStatementSequence();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRBrace();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c37(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStatementSequence() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDocumentedStatement();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDocumentedStatement();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c38(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDocumentedStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsedocumentComment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStatement();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c39(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStatement() {
      var s0;

      s0 = peg$parseAnnotatedStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseInLineStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBlockStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parseEmptyStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLocalNameDeclarationOrExpressionStatement();
              if (s0 === peg$FAILED) {
                s0 = peg$parseLocalNameDeclarationStatement();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseIfStatement();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSwitchStatement();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseWhileStatement();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseForStatement();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseDoStatement();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseBreakStatement();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseReturnStatement();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseAcceptStatement();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseClassifyStatement();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseAnnotatedStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepSlashSlashAt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAnnotations();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLineTerminator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseStatement();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAnnotations() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseAnnotation();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopAt();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAnnotation();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopAt();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAnnotation();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAnnotation() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsepLParen();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseNameList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepRParen();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNameList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsepComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsename();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInLineStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsepSlashStarAt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepLParen();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepRParen();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsedocumentComment();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBlockStatement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseBlock();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c40(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEmptyStatement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsepSemiColon();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c41();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLocalNameDeclarationOrExpressionStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsePotentiallyAmbiguousQualifiedName();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMultiplicityIndicator();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsename();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLocalNameDeclarationStatementCompletion();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseNameToExpressionCompletion();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepSemiColon();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNonNameExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepSemiColon();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseLocalNameDeclarationStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsekwLet();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepColon();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTypeName();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseMultiplicityIndicator();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseLocalNameDeclarationStatementCompletion();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLocalNameDeclarationStatementCompletion() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopAssign();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInitializationExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepSemiColon();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInitializationExpression() {
      var s0;

      s0 = peg$parseExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSequenceInitializationExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseInstanceInitializationExpression();
        }
      }

      return s0;
    }

    function peg$parseInstanceInitializationExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwNew();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTuple();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIfStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwIf();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSequentialClauses();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFinalClause();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c42(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSequentialClauses() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseConcurrentClauses();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsekwElse();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsekwIf();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseConcurrentClauses();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c43(s1, s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsekwElse();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsekwIf();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseConcurrentClauses();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c43(s1, s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c44(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConcurrentClauses() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseNonFinalClause();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsekwOr();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsekwIf();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseNonFinalClause();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c43(s1, s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsekwOr();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsekwIf();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseNonFinalClause();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c43(s1, s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c45(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNonFinalClause() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepLParen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRParen();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseBlock();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c46(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFinalClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwElse();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBlock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c37(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSwitchStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsekwSwitch();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepLParen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepRParen();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepLBrace();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseSwitchClause();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseSwitchClause();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseSwitchDefaultClause();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsepRBrace();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c47(s3, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSwitchClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseSwitchCase();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseSwitchCase();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNonEmptyStatementSequence();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c48(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSwitchCase() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwCase();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepColon();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c29(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSwitchDefaultClause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwDefault();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepColon();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNonEmptyStatementSequence();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c37(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNonEmptyStatementSequence() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDocumentedStatement();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseDocumentedStatement();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c38(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseWhileStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsekwWhile();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepLParen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepRParen();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseBlock();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c49(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDoStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsekwDo();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBlock();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekwWhile();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepLParen();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepRParen();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsepSemiColon();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c50(s2, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseForStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsekwFor();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepLParen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseForControl();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepRParen();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseBlock();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c51(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseForControl() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLoopVariableDefinition();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsepComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLoopVariableDefinition();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c52(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLoopVariableDefinition();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c52(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c53(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLoopVariableDefinition() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekwIn();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsepDoubleDot();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseExpression();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c54(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseQualifiedName();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsename();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsepColon();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseExpression();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c55(s1, s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseBreakStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwBreak();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c56();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseReturnStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwReturn();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepSemiColon();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c57(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAcceptStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAcceptClause();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepSemiColon();
        if (s2 === peg$FAILED) {
          s2 = peg$parseCompoundAcceptStatementCompletion();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCompoundAcceptStatementCompletion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseBlock();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsekwOr();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAcceptBlock();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsekwOr();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAcceptBlock();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAcceptBlock() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAcceptClause();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBlock();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAcceptClause() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsekwAccept();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepLParen();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsename();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepColon();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c12(s4);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseQualifiedNameList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepRParen();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c58(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassifyStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekwClassify();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseClassificationClause();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepSemiColon();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c59(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassificationClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseClassificationFromClause();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseClassificationToClause();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseReclassifyAllClause();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseClassificationToClause();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c61(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseClassificationFromClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwFrom();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseQualifiedNameList();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c62(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassificationToClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwTo();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseQualifiedNameList();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c62(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseReclassifyAllClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwFrom();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopMult();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c63();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseQualifiedNameList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQualifiedName();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsepComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseQualifiedName();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseQualifiedName();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c64(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNonNameExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseNonNameUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNameToExpressionCompletion() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseNameToPrimaryExpression();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePrimaryToExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePrimaryToExpressionCompletion() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePostfixExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExpressionCompletion() {
      var s0;

      s0 = peg$parseAssignmentExpressionCompletion();
      if (s0 === peg$FAILED) {
        s0 = peg$parseConditionalExpressionCompletion();
      }

      return s0;
    }

    function peg$parseAssignmentExpressionCompletion() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAssignmentOperator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAssignmentOperator() {
      var s0;

      s0 = peg$parseopAssign();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopAsgnMod();
        if (s0 === peg$FAILED) {
          s0 = peg$parseopAsgnBitXor();
          if (s0 === peg$FAILED) {
            s0 = peg$parseopAsgnBitOr();
            if (s0 === peg$FAILED) {
              s0 = peg$parseopAsgnBitAnd();
              if (s0 === peg$FAILED) {
                s0 = peg$parseopAsgnDiv();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseopAsgnMult();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseopAsgnSub();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseopAsgnAdd();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseopAsgnZeroShiftRight();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseopAsgnRightShift();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseopAsgnLeftShift();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseConditionalExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseConditionalExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConditionalExpressionCompletion() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseConditionalOrExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseopQuestionMark();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseExpression();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepColon();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseConditionalExpression();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConditionalAndExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseConditionalAndExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConditionalAndExpressionCompletion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseInclusiveOrExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopLogAnd();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseInclusiveOrExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopLogAnd();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseInclusiveOrExpression();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConditionalOrExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseConditionalOrExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConditionalOrExpressionCompletion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseConditionalAndExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopLogOr();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseConditionalAndExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopLogOr();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseConditionalAndExpression();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAndExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAndExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAndExpressionCompletion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseEqualityExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopBitLogAnd();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseEqualityExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopBitLogAnd();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEqualityExpression();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExclusiveOrExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExclusiveOrExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExclusiveOrExpressionCompletion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseAndExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopBitLogXor();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAndExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopBitLogXor();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAndExpression();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInclusiveOrExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInclusiveOrExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInclusiveOrExpressionCompletion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseExclusiveOrExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopBitLogOr();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseExclusiveOrExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopBitLogOr();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExclusiveOrExpression();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEqualityExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseClassificationExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEqualityExpressionCompletion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseClassificationExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseEqualityOperator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseClassificationExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseEqualityOperator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseClassificationExpression();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEqualityOperator() {
      var s0;

      s0 = peg$parseopEqual();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopNotEqual();
      }

      return s0;
    }

    function peg$parseClassificationExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseClassificationExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassificationExpressionCompletion() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseRelationalExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseClassificationOperator();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseQualifiedName();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassificationOperator() {
      var s0;

      s0 = peg$parsekwInstanceOf();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwHasType();
      }

      return s0;
    }

    function peg$parseRelationalExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRelationalExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRelationalExpressionCompletion() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseShiftExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseRelationalOperator();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseShiftExpression();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRelationalOperator() {
      var s0;

      s0 = peg$parseopLessOrEqual();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopGreaterOrEqual();
        if (s0 === peg$FAILED) {
          s0 = peg$parseopGreater();
          if (s0 === peg$FAILED) {
            s0 = peg$parseopLess();
          }
        }
      }

      return s0;
    }

    function peg$parseShiftExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseShiftExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseShiftExpressionCompletion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseAdditiveExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseShiftOperator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAdditiveExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseShiftOperator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAdditiveExpression();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseShiftOperator() {
      var s0;

      s0 = peg$parseopLeftShift();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopRightShift();
        if (s0 === peg$FAILED) {
          s0 = peg$parseopZeroShiftRight();
        }
      }

      return s0;
    }

    function peg$parseMultiplicativeExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMultiplicativeExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseMultiplicativeExpressionCompletion() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parseMultiplicativeOperator();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseUnaryExpression();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseMultiplicativeOperator();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseUnaryExpression();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseMultiplicativeOperator() {
      var s0;

      s0 = peg$parseopMult();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopDiv();
        if (s0 === peg$FAILED) {
          s0 = peg$parseopMod();
        }
      }

      return s0;
    }

    function peg$parseAdditiveExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAdditiveExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAdditiveExpressionCompletion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseMultiplicativeExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseAdditiveOperator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseMultiplicativeExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseAdditiveOperator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseMultiplicativeExpression();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAdditiveOperator() {
      var s0;

      s0 = peg$parseopAdd();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopSub();
      }

      return s0;
    }

    function peg$parseUnaryExpression() {
      var s0;

      s0 = peg$parsePostfixOrCastExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNonPostfixNonCastUnaryExpression();
      }

      return s0;
    }

    function peg$parsePostfixOrCastExpression() {
      var s0, s1, s2;

      s0 = peg$parseNonNamePostfixOrCastExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNameOrPrimaryExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePostfixExpressionCompletion();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseNonNameUnaryExpression() {
      var s0;

      s0 = peg$parseNonNamePostfixOrCastExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNonPostfixNonCastUnaryExpression();
      }

      return s0;
    }

    function peg$parseNonNamePostfixOrCastExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsepLParen();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsekwAny();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsepRParen();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCastCompletion();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsePotentiallyAmbiguousQualifiedName();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsepRParen();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCastCompletion();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseNameToExpressionCompletion();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepRParen();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsePostfixExpressionCompletion();
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseNonNameExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsepRParen();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsePostfixExpressionCompletion();
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBaseExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePostfixExpressionCompletion();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseNonPostfixNonCastUnaryExpression() {
      var s0;

      s0 = peg$parsePrefixExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumericUnaryExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBooleanNegationExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBitStringComplementExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parseIsolationExpression();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseBooleanNegationExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseopLogNot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUnaryExpression();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBitStringComplementExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseopBitNot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUnaryExpression();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNumericUnaryExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseNumericUnaryOperator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUnaryExpression();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNumericUnaryOperator() {
      var s0;

      s0 = peg$parseopAdd();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopSub();
      }

      return s0;
    }

    function peg$parseIsolationExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseopDollar();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUnaryExpression();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCastExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepLParen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTypeName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRParen();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCastCompletion();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCastCompletion() {
      var s0;

      s0 = peg$parsePostfixOrCastExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBooleanNegationExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBitStringComplementExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIsolationExpression();
          }
        }
      }

      return s0;
    }

    function peg$parsePostfixExpressionCompletion() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePrimaryExpressionCompletion();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAffixOperator();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePrefixExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAffixOperator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePrimaryExpression();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAffixOperator() {
      var s0;

      s0 = peg$parseopIncrement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopDecrement();
      }

      return s0;
    }

    function peg$parsePrimaryExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseNameOrPrimaryExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parseBaseExpression();
        if (s1 === peg$FAILED) {
          s1 = peg$parseParenthesizedExpression();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePrimaryExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBaseExpression() {
      var s0;

      s0 = peg$parseLiteralExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseThisExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSuperInvocationExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseInstanceCreationOrSequenceConstructionExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSequenceAnyExpression();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNameToPrimaryExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsepDot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLinkOperationCompletion();
        if (s2 === peg$FAILED) {
          s2 = peg$parseClassExtentExpressionCompletion();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseSequenceConstructionExpressionCompletion();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTuple();
        }
      }

      return s0;
    }

    function peg$parsePrimaryExpressionCompletion() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parseFeature();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTuple();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseSequenceOperationOrReductionOrExpansion();
        if (s1 === peg$FAILED) {
          s1 = peg$parseIndex();
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseFeature();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTuple();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$parseSequenceOperationOrReductionOrExpansion();
          if (s1 === peg$FAILED) {
            s1 = peg$parseIndex();
          }
        }
      }

      return s0;
    }

    function peg$parseLiteralExpression() {
      var s0;

      s0 = peg$parseBooleanLiteralExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNaturalLiteralExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUnboundedLiteralExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStringLiteralExpression();
          }
        }
      }

      return s0;
    }

    function peg$parseBooleanLiteralExpression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsebooleanLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c65(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNaturalLiteralExpression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenaturalLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c66(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseUnboundedLiteralExpression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseopMult();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c67();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseStringLiteralExpression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsestringLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c68(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNameOrPrimaryExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePotentiallyAmbiguousQualifiedName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNameToPrimaryExpression();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c69(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseThisExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwThis();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTuple();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseParenthesizedExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepLParen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRParen();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c29(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFeature() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsepDot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNameBinding();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTuple() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepLParen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNamedTupleExpressionList();
        if (s2 === peg$FAILED) {
          s2 = peg$parsePositionalTupleExpressionList();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRParen();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c71(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePositionalTupleExpressionList() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePositionalTupleExpressionListCompletion();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c72(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePositionalTupleExpressionListCompletion() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parsepComma();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseExpression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c73(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parsepComma();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c73(s3);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseNamedTupleExpressionList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseNamedExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsepComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseNamedExpression();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c74(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseNamedExpression();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c74(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c75(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNamedExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepFatArrow();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c76(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSuperInvocationExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekwSuper();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsepDot();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseQualifiedName();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c77(s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTuple();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInstanceCreationOrSequenceConstructionExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwNew();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseQualifiedName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSequenceConstructionExpressionCompletion();
          if (s3 === peg$FAILED) {
            s3 = peg$parseTuple();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLinkOperationCompletion() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseLinkOperation();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLinkOperationTuple();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLinkOperation() {
      var s0;

      s0 = peg$parsekwCreateLink();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwDestroyLink();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekwClearAssoc();
        }
      }

      return s0;
    }

    function peg$parseLinkOperationTuple() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsepLParen();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsename();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseIndex();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parsepFatArrow();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseIndexedNamedExpressionListCompletion();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parsePrimaryToExpressionCompletion();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsePositionalTupleExpressionListCompletion();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsepFatArrow();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseIndexedNamedExpressionListCompletion();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parsePositionalTupleExpressionList();
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepLParen();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIndexedNamedExpressionListCompletion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsepComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseIndexedNamedExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseIndexedNamedExpression();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIndexedNamedExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIndex();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepFatArrow();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassExtentExpressionCompletion() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwAllInstances();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepLParen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRParen();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSequenceAnyExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsekwAny();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSequenceConstructionExpressionCompletion();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwNull();
      }

      return s0;
    }

    function peg$parseSequenceConstructionExpressionCompletion() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseMultiplicityIndicator();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepLBrace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSequenceElements();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepRBrace();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseMultiplicityIndicator() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsepLBracket();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepRBracket();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSequenceElements() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsepDoubleDot();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseExpression();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseSequenceElementListCompletion();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSequenceInitializationExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSequenceElementListCompletion();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseSequenceElementListCompletion() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsepComma();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseSequenceElement();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsepComma();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSequenceElement();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepComma();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSequenceElement() {
      var s0;

      s0 = peg$parseExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSequenceInitializationExpression();
      }

      return s0;
    }

    function peg$parseSequenceInitializationExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekwNew();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepLBrace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSequenceElements();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepRBrace();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIndex() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepLBracket();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepRBracket();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSequenceOperationOrReductionOrExpansion() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsepSlimArrow();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseQualifiedName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseTuple();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsekwReduce();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsekwOrdered();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQualifiedName();
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsename();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsename();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsepLParen();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseExpression();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsepRParen();
                    if (s7 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6, s7];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTypeName() {
      var s0;

      s0 = peg$parseQualifiedName();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwAny();
      }

      return s0;
    }

    function peg$parseQualifiedName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnqualifiedName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseColonQualifiedNameCompletion();
        if (s2 === peg$FAILED) {
          s2 = peg$parseDotQualifiedNameCompletion();
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c78(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePotentiallyAmbiguousQualifiedName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnqualifiedName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseColonQualifiedNameCompletion();
        if (s2 === peg$FAILED) {
          s2 = peg$parseDotQualifiedNameCompletion();
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c79(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseColonQualifiedName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnqualifiedName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseColonQualifiedNameCompletion();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c80(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseColonQualifiedNameCompletion() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parsepDoubleColon();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNameBinding();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c81(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          s2 = peg$parsepDoubleColon();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseNameBinding();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c81(s3);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDotQualifiedName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnqualifiedName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDotQualifiedNameCompletion();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c80(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDotQualifiedNameCompletion() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parsepDot();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNameBinding();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c81(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          s2 = peg$parsepDot();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseNameBinding();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c81(s3);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUnqualifiedName() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseNameBinding();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c82(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNameBinding() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTemplateBinding();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c83(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTemplateBinding() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopLess();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePositionalTemplateBinding();
        if (s2 === peg$FAILED) {
          s2 = peg$parseNamedTemplateBinding();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseopGreater();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c84(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePositionalTemplateBinding() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQualifiedName();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsepComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseQualifiedName();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c85(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseQualifiedName();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c85(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c86(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNamedTemplateBinding() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseTemplateParameterSubstitution();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsepComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTemplateParameterSubstitution();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c87(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTemplateParameterSubstitution();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c87(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c88(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTemplateParameterSubstitution() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepFatArrow();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQualifiedName();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c89(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepDoubleDot() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c90) {
          s2 = peg$c90;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c91); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepDoubleColon() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c92) {
          s2 = peg$c92;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepFatArrow() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c94) {
          s2 = peg$c94;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepSlimArrow() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c96) {
          s2 = peg$c96;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c97); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepLParen() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c98;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c99); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepRParen() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s2 = peg$c100;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepLBrace() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c102;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepRBrace() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s2 = peg$c104;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c105); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepLBracket() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c106;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c107); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepRBracket() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s2 = peg$c108;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c109); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepSemiColon() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c110;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepComma() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c112;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c113); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepDot() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c114;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c115); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepColon() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c116;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c117); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepSlashSlashAt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c118) {
          s2 = peg$c118;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c119); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepSlashStarAt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepunPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c120) {
          s2 = peg$c120;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopZeroShiftRight() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c122) {
          s2 = peg$c122;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c123); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAsgnLeftShift() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c124) {
          s2 = peg$c124;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c125); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAsgnRightShift() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c126) {
          s2 = peg$c126;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAsgnZeroShiftRight() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c128) {
          s2 = peg$c128;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopLeftShift() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c130) {
          s2 = peg$c130;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopRightShift() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c132) {
          s2 = peg$c132;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c133); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopEqual() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c134) {
          s2 = peg$c134;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c135); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopLessOrEqual() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c136) {
          s2 = peg$c136;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c137); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopGreaterOrEqual() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c138) {
          s2 = peg$c138;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopNotEqual() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c140) {
          s2 = peg$c140;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c141); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopLogAnd() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c142) {
          s2 = peg$c142;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c143); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopLogOr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c144) {
          s2 = peg$c144;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c145); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopIncrement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c146) {
          s2 = peg$c146;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c147); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopDecrement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c148) {
          s2 = peg$c148;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c149); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAsgnAdd() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c150) {
          s2 = peg$c150;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c151); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAsgnSub() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c152) {
          s2 = peg$c152;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c153); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAsgnMult() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c154) {
          s2 = peg$c154;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c155); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAsgnDiv() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c156) {
          s2 = peg$c156;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c157); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAsgnBitAnd() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c158) {
          s2 = peg$c158;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c159); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAsgnBitOr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c160) {
          s2 = peg$c160;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c161); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAsgnBitXor() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c162) {
          s2 = peg$c162;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c163); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAsgnMod() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c164) {
          s2 = peg$c164;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c165); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAssign() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c166;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c167); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopGreater() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s2 = peg$c168;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c169); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopLess() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 60) {
          s2 = peg$c170;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c171); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopLogNot() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s2 = peg$c172;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c173); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopBitNot() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 126) {
          s2 = peg$c174;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c175); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopQuestionMark() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s2 = peg$c176;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c177); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s2 = peg$c178;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c179); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopDollar() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s2 = peg$c180;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c181); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAdd() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s2 = peg$c182;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c183); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopSub() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c184;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c185); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopMult() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s2 = peg$c186;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c187); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopDiv() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c188;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopBitLogAnd() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 38) {
          s2 = peg$c190;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c191); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopBitLogOr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 124) {
          s2 = peg$c192;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c193); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopBitLogXor() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 94) {
          s2 = peg$c194;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c195); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopMod() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s2 = peg$c196;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c197); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwAbstract() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c198) {
          s2 = peg$c198;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c199); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwAccept() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c200) {
          s2 = peg$c200;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c201); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwActive() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c202) {
          s2 = peg$c202;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c203); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwActivity() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c204) {
          s2 = peg$c204;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c205); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwAllInstances() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c206) {
          s2 = peg$c206;
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c207); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwAny() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c208) {
          s2 = peg$c208;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwAs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c210) {
          s2 = peg$c210;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c211); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwAssoc() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c212) {
          s2 = peg$c212;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c213); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwBreak() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c214) {
          s2 = peg$c214;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c215); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwCase() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c216) {
          s2 = peg$c216;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c217); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwClass() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c218) {
          s2 = peg$c218;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c219); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwClassify() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c220) {
          s2 = peg$c220;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c221); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwClearAssoc() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c222) {
          s2 = peg$c222;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c223); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwCompose() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c224) {
          s2 = peg$c224;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c225); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwCreateLink() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c226) {
          s2 = peg$c226;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c227); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwDataType() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c228) {
          s2 = peg$c228;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c229); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwDefault() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c230) {
          s2 = peg$c230;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c231); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwDestroyLink() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c232) {
          s2 = peg$c232;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c233); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwDo() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c234) {
          s2 = peg$c234;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c235); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwElse() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c236) {
          s2 = peg$c236;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c237); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwEnum() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c238) {
          s2 = peg$c238;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c239); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwFor() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c240) {
          s2 = peg$c240;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c241); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwFrom() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c242) {
          s2 = peg$c242;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c243); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwHasType() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c244) {
          s2 = peg$c244;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c245); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwIf() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c246) {
          s2 = peg$c246;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c247); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwImport() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c248) {
          s2 = peg$c248;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c249); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwIn() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c250) {
          s2 = peg$c250;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c251); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwInOut() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c252) {
          s2 = peg$c252;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c253); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwInstanceOf() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c254) {
          s2 = peg$c254;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c255); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwLet() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c256) {
          s2 = peg$c256;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c257); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwNamespace() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c258) {
          s2 = peg$c258;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c259); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwNew() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c260) {
          s2 = peg$c260;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c261); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwNonUnique() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c262) {
          s2 = peg$c262;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c263); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwNull() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c264) {
          s2 = peg$c264;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c265); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwOr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c266) {
          s2 = peg$c266;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c267); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwOrdered() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c268) {
          s2 = peg$c268;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c269); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwOut() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c270) {
          s2 = peg$c270;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c271); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwPackage() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c272) {
          s2 = peg$c272;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c273); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwPrivate() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c274) {
          s2 = peg$c274;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c275); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwProtected() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c276) {
          s2 = peg$c276;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c277); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwPublic() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c278) {
          s2 = peg$c278;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c279); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwReceive() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c280) {
          s2 = peg$c280;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c281); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwRedefines() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c282) {
          s2 = peg$c282;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c283); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwReduce() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c284) {
          s2 = peg$c284;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c285); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwReturn() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c286) {
          s2 = peg$c286;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c287); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwSequence() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c288) {
          s2 = peg$c288;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c289); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwSpecializes() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c290) {
          s2 = peg$c290;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c291); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwSuper() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c292) {
          s2 = peg$c292;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c293); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwSignal() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c294) {
          s2 = peg$c294;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c295); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwSwitch() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c296) {
          s2 = peg$c296;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c297); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwThis() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c298) {
          s2 = peg$c298;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c299); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwTo() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c300) {
          s2 = peg$c300;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c301); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwWhile() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwPrefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c302) {
          s2 = peg$c302;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c303); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefnIsUnique() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenamePrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c304;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c306) {
            s3 = peg$c306;
            peg$currPos += 8;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c307); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c304;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c305); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetokenSuffix();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c308(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefnForAll() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenamePrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c304;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c309) {
            s3 = peg$c309;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c310); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c304;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c305); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetokenSuffix();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c308(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefnExists() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenamePrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c304;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c311) {
            s3 = peg$c311;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c312); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c304;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c305); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetokenSuffix();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c308(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefnOne() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenamePrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c304;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c313) {
            s3 = peg$c313;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c314); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c304;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c305); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetokenSuffix();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c308(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefnCollect() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenamePrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c304;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c315) {
            s3 = peg$c315;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c316); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c304;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c305); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetokenSuffix();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c308(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefnIterate() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenamePrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c304;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c317) {
            s3 = peg$c317;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c318); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c304;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c305); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetokenSuffix();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c308(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefnSelect() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenamePrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c304;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c319) {
            s3 = peg$c319;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c320); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c304;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c305); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetokenSuffix();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c308(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefnReject() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenamePrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c304;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c321) {
            s3 = peg$c321;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c322); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c304;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c305); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetokenSuffix();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c308(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseannInline() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenamePrefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c304;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c323) {
            s3 = peg$c323;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c324); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c304;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c305); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetokenSuffix();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c308(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsename() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsenamePrefix();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetokenContent();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c308(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedocumentComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedocCommentPrefix();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetokenStringContent();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c308(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebooleanLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsebooleanLiteralPrefix();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetokenContentInCommas();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c308(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenaturalLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsenumberLiteralPrefix();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetokenContentInCommas();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c308(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestringLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestringLiteralPrefix();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetokenStringContent();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetokenSuffix();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c308(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwPrefix() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c325) {
        s1 = peg$c325;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c326); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubTokenSeparator();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopPrefix() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c327) {
        s1 = peg$c327;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c328); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubTokenSeparator();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepunPrefix() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 112) {
        s1 = peg$c329;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c330); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubTokenSeparator();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenamePrefix() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 110) {
        s1 = peg$c331;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c332); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubTokenSeparator();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedocCommentPrefix() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c333) {
        s1 = peg$c333;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c334); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubTokenSeparator();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenumberLiteralPrefix() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c335) {
        s1 = peg$c335;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c336); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubTokenSeparator();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebooleanLiteralPrefix() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c337) {
        s1 = peg$c337;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c338); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubTokenSeparator();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestringLiteralPrefix() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c339) {
        s1 = peg$c339;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c340); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubTokenSeparator();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetokenStringContent() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetokenContentInCommas();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c341(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetokenContentInCommas() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c304;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c305); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetokenContent();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c304;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c305); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c308(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetokenContent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsetokenCharacter();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsetokenCharacter();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c342(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetokenCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsesubTokenSeparator();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c343); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c344(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetokenSuffix() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesubTokenSeparator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesubTokenSeparator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenumber();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetokenSeprator();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsedigit();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsedigit();
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c345.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c346); }
      }

      return s0;
    }

    function peg$parsesubTokenSeparator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c347;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c348); }
      }

      return s0;
    }

    function peg$parsetokenSeprator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c349;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c350); }
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c349;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c350); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c351;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c352); }
        }
      }

      return s0;
    }

    function peg$parseInputCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseLineTerminator();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c343); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c344(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCommentText() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseNotStar();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseNotStar();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCommentText();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c353(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStarCommentText() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c186;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c187); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseNotStarNotSlash();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCommentText();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNotAt() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 64) {
        s2 = peg$c178;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInputCharacter();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNotStar() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c186;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c187); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInputCharacter();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c344(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseLineTerminator();
      }

      return s0;
    }

    function peg$parseNotStartNotAt() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c186;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c187); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s2 = peg$c178;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c179); }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInputCharacter();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseLineTerminator();
      }

      return s0;
    }

    function peg$parseNotStarNotSlash() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c354) {
        s2 = peg$c354;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c355); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInputCharacter();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseLineTerminator();
      }

      return s0;
    }


        var alf = require("../Alf/Alf");


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
